# Generated by Django 5.2.1 on 2025-09-12 20:08

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdminUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the user', primary_key=True, serialize=False)),
                ('email', models.EmailField(db_index=True, help_text="User's email address (used for login)", max_length=254, unique=True)),
                ('username', models.CharField(help_text='Unique username (3-30 characters, alphanumeric, underscore, hyphen only)', max_length=30, unique=True, validators=[django.core.validators.RegexValidator(message='Username can only contain letters, numbers, underscore, and hyphen', regex='^[a-zA-Z0-9_-]+$')])),
                ('first_name', models.CharField(blank=True, help_text="User's first name", max_length=30, validators=[django.core.validators.RegexValidator(message='First name can only contain letters, spaces, apostrophes, and hyphens', regex="^[a-zA-Z\\s'-]+$")])),
                ('last_name', models.CharField(blank=True, help_text="User's last name", max_length=30, validators=[django.core.validators.RegexValidator(message='Last name can only contain letters, spaces, apostrophes, and hyphens', regex="^[a-zA-Z\\s'-]+$")])),
                ('role', models.CharField(choices=[('super_admin', 'Super Administrator'), ('admin', 'Administrator'), ('readonly', 'Read Only User')], db_index=True, default='readonly', help_text="User's role determining access permissions", max_length=20)),
                ('active', models.BooleanField(db_index=True, default=True, help_text='Whether the user account is active')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='When the user account was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the user account was last updated')),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, help_text='Number of consecutive failed login attempts')),
                ('last_failed_login', models.DateTimeField(blank=True, help_text='Timestamp of last failed login attempt', null=True)),
                ('account_locked_until', models.DateTimeField(blank=True, help_text='Account locked until this timestamp', null=True)),
                ('password_changed_at', models.DateTimeField(blank=True, help_text='When the password was last changed', null=True)),
                ('phone_number', models.CharField(blank=True, help_text="User's phone number (optional)", max_length=20, validators=[django.core.validators.RegexValidator(message='Phone number must be valid format', regex='^\\+?1?\\d{9,15}$')])),
                ('timezone', models.CharField(default='UTC', help_text="User's timezone preference", max_length=50)),
                ('email_notifications', models.BooleanField(default=True, help_text='Whether user wants to receive email notifications')),
                ('two_factor_enabled', models.BooleanField(default=False, help_text='Whether two-factor authentication is enabled')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Admin User',
                'verbose_name_plural': 'Admin Users',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LoginAttempt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(default='unknown', max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('attempted_at', models.DateTimeField(auto_now_add=True)),
                ('successful', models.BooleanField(default=False)),
                ('suspicious', models.BooleanField(default=False)),
                ('blocked', models.BooleanField(default=False)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('details', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'db_table': 'login_attempts',
                'ordering': ['-attempted_at'],
                'indexes': [models.Index(fields=['username'], name='login_attem_usernam_7d95c4_idx'), models.Index(fields=['email'], name='login_attem_email_34e2ae_idx'), models.Index(fields=['ip_address'], name='login_attem_ip_addr_0a65f5_idx'), models.Index(fields=['attempted_at'], name='login_attem_attempt_e22dfe_idx'), models.Index(fields=['successful'], name='login_attem_success_eadb72_idx'), models.Index(fields=['suspicious'], name='login_attem_suspici_e6316c_idx'), models.Index(fields=['ip_address', 'attempted_at'], name='login_attem_ip_addr_bdf4e7_idx')],
            },
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('token', models.CharField(db_index=True, max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('used', models.BooleanField(default=False)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'password_reset_tokens',
            },
        ),
        migrations.CreateModel(
            name='SecurityLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('action', models.CharField(max_length=255)),
                ('event_type', models.CharField(choices=[('LOGIN', 'Login Event'), ('LOGOUT', 'Logout Event'), ('PASSWORD_CHANGE', 'Password Change'), ('PASSWORD_RESET', 'Password Reset'), ('ACCOUNT_LOCKED', 'Account Locked'), ('ACCOUNT_UNLOCKED', 'Account Unlocked'), ('PERMISSION_DENIED', 'Permission Denied'), ('SUSPICIOUS_ACTIVITY', 'Suspicious Activity'), ('DATA_ACCESS', 'Data Access'), ('SYSTEM_ERROR', 'System Error'), ('SECURITY_EVENT', 'General Security Event')], default='SECURITY_EVENT', max_length=100)),
                ('severity', models.CharField(choices=[('INFO', 'Information'), ('WARNING', 'Warning'), ('ERROR', 'Error'), ('CRITICAL', 'Critical')], default='INFO', max_length=20)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('details', models.JSONField(default=dict)),
                ('additional_data', models.JSONField(blank=True, default=dict)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='security_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'security_logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_key', models.CharField(max_length=40, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('device_type', models.CharField(blank=True, max_length=50)),
                ('browser', models.CharField(blank=True, max_length=100)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_sessions',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.AddIndex(
            model_name='adminuser',
            index=models.Index(fields=['email'], name='authenticat_email_c853b7_idx'),
        ),
        migrations.AddIndex(
            model_name='adminuser',
            index=models.Index(fields=['role'], name='authenticat_role_564484_idx'),
        ),
        migrations.AddIndex(
            model_name='adminuser',
            index=models.Index(fields=['active'], name='authenticat_active_d62137_idx'),
        ),
        migrations.AddIndex(
            model_name='adminuser',
            index=models.Index(fields=['created_at'], name='authenticat_created_d25819_idx'),
        ),
        migrations.AddIndex(
            model_name='adminuser',
            index=models.Index(fields=['last_login'], name='authenticat_last_lo_589ad5_idx'),
        ),
        migrations.AddConstraint(
            model_name='adminuser',
            constraint=models.CheckConstraint(condition=models.Q(('role__in', ['super_admin', 'admin', 'readonly'])), name='valid_role'),
        ),
        migrations.AddIndex(
            model_name='passwordresettoken',
            index=models.Index(fields=['token'], name='password_re_token_060a1f_idx'),
        ),
        migrations.AddIndex(
            model_name='passwordresettoken',
            index=models.Index(fields=['expires_at'], name='password_re_expires_8e96b7_idx'),
        ),
        migrations.AddIndex(
            model_name='passwordresettoken',
            index=models.Index(fields=['used'], name='password_re_used_de7a2c_idx'),
        ),
        migrations.AddIndex(
            model_name='passwordresettoken',
            index=models.Index(fields=['user', 'used'], name='password_re_user_id_4cd856_idx'),
        ),
        migrations.AddConstraint(
            model_name='passwordresettoken',
            constraint=models.CheckConstraint(condition=models.Q(('expires_at__gt', models.F('created_at'))), name='expires_after_created'),
        ),
        migrations.AddIndex(
            model_name='securitylog',
            index=models.Index(fields=['user'], name='security_lo_user_id_7a8552_idx'),
        ),
        migrations.AddIndex(
            model_name='securitylog',
            index=models.Index(fields=['user_email'], name='security_lo_user_em_afc19a_idx'),
        ),
        migrations.AddIndex(
            model_name='securitylog',
            index=models.Index(fields=['action'], name='security_lo_action_f4f636_idx'),
        ),
        migrations.AddIndex(
            model_name='securitylog',
            index=models.Index(fields=['event_type'], name='security_lo_event_t_25aa39_idx'),
        ),
        migrations.AddIndex(
            model_name='securitylog',
            index=models.Index(fields=['severity'], name='security_lo_severit_3e72cc_idx'),
        ),
        migrations.AddIndex(
            model_name='securitylog',
            index=models.Index(fields=['timestamp'], name='security_lo_timesta_c6c01c_idx'),
        ),
        migrations.AddIndex(
            model_name='securitylog',
            index=models.Index(fields=['event_type', 'timestamp'], name='security_lo_event_t_9e8783_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['user'], name='user_sessio_user_id_eb20aa_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['session_key'], name='user_sessio_session_cc84b9_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['expires_at'], name='user_sessio_expires_66ae96_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['is_active'], name='user_sessio_is_acti_1b3cb1_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['last_activity'], name='user_sessio_last_ac_7cb421_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['user', 'is_active'], name='user_sessio_user_id_bb1b83_idx'),
        ),
    ]
