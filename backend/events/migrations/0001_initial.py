# Generated by Django 5.2.1 on 2025-09-12 20:08

import django.core.validators
import django.utils.timezone
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, help_text='Full event description')),
                ('event_type', models.CharField(choices=[('service', 'Church Service'), ('workshop', 'Workshop'), ('meeting', 'Meeting'), ('social', 'Social Event'), ('outreach', 'Outreach'), ('conference', 'Conference'), ('retreat', 'Retreat'), ('fundraiser', 'Fundraiser'), ('youth', 'Youth Event'), ('kids', 'Kids Event'), ('seniors', 'Seniors Event'), ('prayer', 'Prayer Meeting'), ('bible_study', 'Bible Study'), ('baptism', 'Baptism'), ('wedding', 'Wedding'), ('funeral', 'Memorial Service'), ('other', 'Other')], default='other', max_length=20)),
                ('location', models.CharField(blank=True, help_text='Event location', max_length=255)),
                ('location_details', models.TextField(blank=True, help_text='Additional location information')),
                ('start_datetime', models.DateTimeField(help_text='Event start date and time')),
                ('end_datetime', models.DateTimeField(help_text='Event end date and time')),
                ('registration_deadline', models.DateTimeField(blank=True, help_text='Last date/time for registration', null=True)),
                ('max_capacity', models.PositiveIntegerField(blank=True, help_text='Maximum number of attendees (leave blank for unlimited)', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('requires_registration', models.BooleanField(default=False, help_text='Whether registration is required to attend')),
                ('registration_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Registration fee amount (0 for free events)', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('organizer', models.CharField(blank=True, help_text='Event organizer name', max_length=200)),
                ('contact_email', models.EmailField(blank=True, help_text='Contact email for questions', max_length=254)),
                ('contact_phone', models.CharField(blank=True, help_text='Contact phone number', max_length=20)),
                ('age_min', models.PositiveIntegerField(blank=True, help_text='Minimum age requirement', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(120)])),
                ('age_max', models.PositiveIntegerField(blank=True, help_text='Maximum age requirement', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(120)])),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('cancelled', 'Cancelled'), ('completed', 'Completed'), ('postponed', 'Postponed')], default='draft', max_length=20)),
                ('is_public', models.BooleanField(default=True, help_text='Show on public calendar and allow public registration')),
                ('is_featured', models.BooleanField(default=False, help_text='Feature this event prominently')),
                ('prerequisites', models.TextField(blank=True, help_text='Requirements, items to bring, or preparation needed')),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags for categorization', max_length=500)),
                ('image_url', models.URLField(blank=True, help_text='URL to event poster or promotional image')),
                ('external_registration_url', models.URLField(blank=True, help_text='External registration link (if using third-party system)')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(blank=True, max_length=255)),
                ('last_modified_by', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'ordering': ['start_datetime'],
            },
        ),
        migrations.CreateModel(
            name='EventCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('color', models.CharField(default='#3498db', help_text='Hex color code', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_by', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Event Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EventRegistration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('waitlist', 'Waitlisted'), ('attended', 'Attended'), ('no_show', 'No Show'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('registration_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('notes', models.TextField(blank=True, help_text='Additional notes or comments')),
                ('dietary_requirements', models.CharField(blank=True, help_text='Special dietary needs or restrictions', max_length=500)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=200)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=20)),
                ('accessibility_needs', models.CharField(blank=True, help_text='Any accessibility accommodations needed', max_length=500)),
                ('payment_status', models.CharField(choices=[('not_required', 'Not Required'), ('pending', 'Payment Pending'), ('paid', 'Paid'), ('partial', 'Partially Paid'), ('refunded', 'Refunded'), ('failed', 'Payment Failed')], default='not_required', max_length=20)),
                ('payment_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('payment_reference', models.CharField(blank=True, help_text='Payment reference number or transaction ID', max_length=100)),
                ('payment_date', models.DateTimeField(blank=True, null=True)),
                ('approved_by', models.CharField(blank=True, max_length=255)),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('check_in_time', models.DateTimeField(blank=True, null=True)),
                ('check_out_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-registration_date'],
            },
        ),
        migrations.CreateModel(
            name='EventReminder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reminder_type', models.CharField(choices=[('automatic', 'Automatic'), ('manual', 'Manual'), ('follow_up', 'Follow-up')], default='automatic', max_length=20)),
                ('reminder_method', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('both', 'Email and SMS'), ('push', 'Push Notification')], default='email', max_length=10)),
                ('send_at', models.DateTimeField(help_text='When to send the reminder')),
                ('days_before', models.PositiveIntegerField(blank=True, help_text='Days before event to send (for automatic reminders)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(365)])),
                ('subject', models.CharField(blank=True, max_length=200)),
                ('message', models.TextField(blank=True, help_text='Reminder message content')),
                ('send_to_all', models.BooleanField(default=True, help_text='Send to all registered members')),
                ('target_statuses', models.CharField(blank=True, help_text='Comma-separated list of registration statuses to target', max_length=200)),
                ('sent', models.BooleanField(default=False)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('sent_count', models.PositiveIntegerField(default=0, help_text='Number of recipients')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_by', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'ordering': ['send_at'],
            },
        ),
        migrations.CreateModel(
            name='EventVolunteer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('coordinator', 'Event Coordinator'), ('setup', 'Setup Crew'), ('registration', 'Registration Desk'), ('usher', 'Usher'), ('security', 'Security'), ('tech', 'Technical Support'), ('catering', 'Catering/Food Service'), ('childcare', 'Childcare'), ('cleanup', 'Cleanup Crew'), ('photographer', 'Photographer'), ('other', 'Other')], default='other', max_length=20)),
                ('status', models.CharField(choices=[('invited', 'Invited'), ('confirmed', 'Confirmed'), ('declined', 'Declined'), ('completed', 'Completed'), ('no_show', 'No Show')], default='invited', max_length=20)),
                ('role_description', models.TextField(blank=True, help_text='Specific duties and responsibilities')),
                ('start_time', models.DateTimeField(blank=True, help_text='Volunteer start time', null=True)),
                ('end_time', models.DateTimeField(blank=True, help_text='Volunteer end time', null=True)),
                ('notes', models.TextField(blank=True)),
                ('invited_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('response_date', models.DateTimeField(blank=True, null=True)),
                ('check_in_time', models.DateTimeField(blank=True, null=True)),
                ('check_out_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_by', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'ordering': ['event', 'role'],
            },
        ),
    ]
