# Generated by Django 5.2.1 on 2025-09-08 16:29

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('groups', '0001_initial'),
        ('members', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('event_type', models.CharField(choices=[('service', 'Church Service'), ('workshop', 'Workshop'), ('meeting', 'Meeting'), ('social', 'Social Event'), ('outreach', 'Outreach'), ('conference', 'Conference'), ('retreat', 'Retreat'), ('fundraiser', 'Fundraiser'), ('youth', 'Youth Event'), ('kids', 'Kids Event'), ('seniors', 'Seniors Event'), ('other', 'Other')], default='other', max_length=20)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('location_details', models.TextField(blank=True, help_text='Additional location information')),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField()),
                ('registration_deadline', models.DateTimeField(blank=True, null=True)),
                ('max_capacity', models.PositiveIntegerField(blank=True, help_text='Maximum number of attendees', null=True)),
                ('requires_registration', models.BooleanField(default=False)),
                ('registration_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('organizer', models.CharField(blank=True, max_length=200)),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('contact_phone', models.CharField(blank=True, max_length=20)),
                ('age_min', models.PositiveIntegerField(blank=True, null=True)),
                ('age_max', models.PositiveIntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='draft', max_length=20)),
                ('is_public', models.BooleanField(default=True, help_text='Show on public calendar')),
                ('is_featured', models.BooleanField(default=False)),
                ('prerequisites', models.TextField(blank=True, help_text='Requirements or items to bring')),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=500)),
                ('image_url', models.URLField(blank=True, help_text='Event poster or image')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(blank=True, max_length=100)),
                ('target_groups', models.ManyToManyField(blank=True, help_text='Specific groups this event is for', to='groups.group')),
            ],
            options={
                'ordering': ['start_datetime'],
            },
        ),
        migrations.CreateModel(
            name='EventRegistration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('waitlist', 'Waitlist'), ('attended', 'Attended'), ('no_show', 'No Show')], default='pending', max_length=20)),
                ('registration_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('notes', models.TextField(blank=True)),
                ('dietary_requirements', models.CharField(blank=True, max_length=200)),
                ('emergency_contact', models.CharField(blank=True, max_length=200)),
                ('payment_status', models.CharField(choices=[('not_required', 'Not Required'), ('pending', 'Pending'), ('paid', 'Paid'), ('refunded', 'Refunded')], default='not_required', max_length=20)),
                ('payment_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='events.event')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_registrations', to='members.member')),
            ],
            options={
                'ordering': ['registration_date'],
            },
        ),
        migrations.CreateModel(
            name='EventReminder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reminder_type', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('both', 'Email and SMS')], default='email', max_length=10)),
                ('send_at', models.DateTimeField()),
                ('message', models.TextField(blank=True)),
                ('sent', models.BooleanField(default=False)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to='events.event')),
            ],
            options={
                'ordering': ['send_at'],
            },
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['start_datetime'], name='events_even_start_d_b72861_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['status'], name='events_even_status_5709b6_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['event_type'], name='events_even_event_t_a87b5c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='eventregistration',
            unique_together={('event', 'member')},
        ),
    ]
